import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an xml tree containing multiple rss news feeds to an html
 * file
 *
 * @author Ayub Abdi
 *
 */
public final class LatestRSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private LatestRSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel")
                : "" + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // Determines the indices of the <title>, <link>, and <description> nodes
        int titleIndex = getChildElement(channel, "title");
        int linkIndex = getChildElement(channel, "link");
        int descriptionIndex = getChildElement(channel, "description");

        // Title of the page
        String title = "Empty Title";

        // Begins the <html> and <head> elements of the html page
        out.println("<html>");
        out.println("<head>");

        /*
         * Checks if the title node has children, then if they do, assigns the
         * child to the title variable
         */
        if (channel.child(titleIndex).numberOfChildren() > 0) {
            title = channel.child(titleIndex).child(0).label();
        }

        out.println("<title>" + title + "</title>");

        // Closes the <head> element and begins the <body> element
        out.println("</head>");
        out.println("<body>");

        // Outputs the link to the page's main website as part of the title
        out.println("<h1><a href=\" " + channel.child(linkIndex).child(0).label() + "\">"
                + title + "</a></h1>");

        /*
         * Checks if the description node has children, and if those children
         * have length, then if they do, outputs the child as a description of
         * the pages contents
         */
        if (channel.child(descriptionIndex).numberOfChildren() > 0
                && channel.child(descriptionIndex).child(0).label().length() > 0) {
            out.println(
                    "<p>" + channel.child(descriptionIndex).child(0).label() + "</p>");
        } else { // Tells the user there is no description if conditions do not hold
            out.println("<p>" + "No description" + "</p>");
        }

        /*
         * Opens the <table> element and its children elements. These elements
         * will be used to construct the feed table
         */
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>" + "Date" + "</th>");
        out.println("<th>" + "Source" + "</th>");
        out.println("<th>" + "News" + "</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * Closes the <table>, <body>, and <html> elements. Will be utilized at
         * the end of the main method
         */
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        // The default index is -1, which assumes the child doesn't exist
        int index = -1;
        int i = 0;

        /*
         * The following for loop determines if the child does exist as well as
         * which index the child has
         */
        while (i < xml.numberOfChildren() && index == -1) {
            if (xml.child(i).isTag() && xml.child(i).label().equals(tag)) {
                index = i;
            }
            i++;
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item")
                : "" + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * Determines if the item node has the children: title, description,
         * link, pubDate (publication date), and source and finds the indices
         * for those children
         */
        int titleIndex = getChildElement(item, "title");
        int descriptionIndex = getChildElement(item, "description");
        int sourceIndex = getChildElement(item, "source");
        int pubDateIndex = getChildElement(item, "pubDate");
        int linkIndex = getChildElement(item, "link");

        // Begins the table row element
        out.println("<tr>");

        /*
         * Checks if pubDate exists and if its child has a length, then outputs
         * the child as the publication date
         */
        if (pubDateIndex != -1
                && item.child(pubDateIndex).child(0).label().length() > 0) {
            out.println("<td>" + item.child(pubDateIndex).child(0).label() + "</td>");
        } else { // Tells the user there is no date if conditions do not hold
            out.println("<td>" + "No date available" + "</td>");
        }

        // This holds the name of the source, with its default value specified below
        String sourceName = "No source available";

        /*
         * Checks if the source node exists and if it has children. Changes the
         * val of sourceName to the name of the source tag if it does
         */
        if (sourceIndex != -1 && item.child(sourceIndex).numberOfChildren() > 0) {
            sourceName = item.child(sourceIndex).child(0).label();

            // Outputs the source's name and the url linking to it
            out.println("<td> <a href=\"" + item.child(sourceIndex).attributeValue("url")
                    + "\">" + sourceName + "</a></td>");
        } else if (sourceIndex != -1 && item.child(sourceIndex).numberOfChildren() == 0) {
            // Outputs just the link
            out.println("<td> <a href=\"" + item.child(sourceIndex).attributeValue("url")
                    + "\"></a></td>");
        } else { // Outputs the source tag's name if conditions do not hold
            out.println("<td>" + sourceName + "</td>");
        }

        /*
         * Holds the title or description, depending on which exist. The default
         * val (which holds no title or description) is specified below
         */
        String titleOrDescription = "No title or description available";

        // Holds the url of the article. Default val is specified below
        String linkURL = "";

        /*
         * Checks if the link node exists, if it has children, then assigns the
         * url to the label of the link node's child
         */
        if (linkIndex != -1 && item.child(linkIndex).numberOfChildren() > 0) {
            linkURL = item.child(linkIndex).child(0).label();
        }

        /*
         * Checks if the title node exists as a child of the item node, then
         * checks if the title has children. then assigns titleOrDescription to
         * the label of the title node's child. Alternatively, if a description
         * node exists as a child of the item node, titleOrDescription is
         * assigned to the label of the child of that node instead
         */
        if (titleIndex != -1 && item.child(titleIndex).numberOfChildren() > 0) {
            titleOrDescription = item.child(titleIndex).child(0).label();
        } else if (descriptionIndex != -1
                && item.child(descriptionIndex).numberOfChildren() > 0) {
            titleOrDescription = item.child(descriptionIndex).child(0).label();
        }

        // Begins the element of the table row
        out.print("<td>");

        /*
         * If the link url has a length, the titleOrDescription will be
         * displayed alongside the url. Else only the titleOrDescription will be
         * displayed
         */
        if (linkURL.length() > 0) {
            out.println("<a href =\"" + linkURL + "\">" + titleOrDescription + "</a>");
        } else {
            out.println(titleOrDescription);
        }

        // Closes the table row element
        out.println("</tr>");

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree xml = new XMLTree1(url);
        /*
         * Checks if the rss feed is an rss feed and of the correct version,
         * then begins streaming it into the html file
         */

        if (xml.label().equals("rss") && xml.hasAttribute("version")
                && xml.attributeValue("version").equals("2.0")) {
            SimpleWriter fileOut = new SimpleWriter1L(file);
            XMLTree channel = xml.child(0);
            outputHeader(channel, fileOut);

            /*
             * Goes through the number of children, determines if the child is
             * an item node, then outputs the table rows based on information
             * from the item node's children
             */
            for (int i = 0; i < channel.numberOfChildren(); i++) {
                if (channel.child(i).label().equals("item")) {
                    processItem(channel.child(i), fileOut);
                }
            }

            // Closing tags of the html file
            outputFooter(fileOut);
            fileOut.close();
        }

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        /*
         * Requests the user for the url of the rss feed aggregator, then
         * assigns url to the url variable
         */
        out.println("Enter the url for a page containing links to news feeds: ");
        String url = in.nextLine();

        // The xml tree that the aggregator will be represented as
        XMLTree xmlFeed = new XMLTree1(url);

        /*
         * Checks if the aggregator has the correct parent node, then outputs
         * the children of the node into an output file in html format
         */
        if (xmlFeed.isTag() && xmlFeed.label().equals("feeds")) {
            /*
             * Prompts the user for the html file name, then declares an input
             * file based on user input
             */
            out.println("Enter the name of the .html file: ");
            String fileIn = in.nextLine();
            SimpleWriter fileOut = new SimpleWriter1L(fileIn);

            // Creates html file header based on the XMLFeed's title
            fileOut.println("<html>");
            fileOut.println("<head>");
            fileOut.println("<title>" + xmlFeed.attributeValue("title") + "</title>");
            fileOut.println("</head>");
            fileOut.println("<h2>" + xmlFeed.attributeValue("title") + "</h2>");
            fileOut.println("<ul>");

            /*
             * Goes through the children of the tree and outputs the links to
             * the rss feeds attached to the tree's children
             */
            for (int i = 0; i < xmlFeed.numberOfChildren(); i++) {
                XMLTree item = xmlFeed.child(i);
                fileOut.println("<li> <a href=\"" + item.attributeValue("file") + "\">"
                        + item.attributeValue("name") + "</a></li>");
                processFeed(item.attributeValue("url"), item.attributeValue("file"), out);
            }

            // Closes the html file code, then closes the html file
            fileOut.println("</ul>");
            fileOut.println("</html>");
            fileOut.close();
        }
        // Closes the input and output streams

        in.close();
        out.close();
    }

}
